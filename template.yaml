AWSTemplateFormatVersion: 2010-09-09
Description: >-
  harmony-hub
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  registerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/register.registerHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Registers new user using Cognito pool
      Environment:
        Variables:
          COGNITO_CLIENTID: !Ref CognitoClientId
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the table
        - DynamoDBCrudPolicy:
            TableName: !Ref HarmonyHubTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref HarmonyHubTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the table
        - DynamoDBCrudPolicy:
            TableName: !Ref HarmonyHubTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref HarmonyHubTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{class}/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the table
        - DynamoDBCrudPolicy:
            TableName: !Ref HarmonyHubTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref HarmonyHubTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST\

  confirmUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/confirm-user.confirmUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        Pre sign-up trigger for Cognito
      # Policies:
      #   LambdaInvokePolicy:
      #       FunctionName: !Ref registerFunction

  # Create Cognito user pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameConfiguration:
        CaseSensitive: true
      LambdaConfig:
        PreSignUp: !GetAtt confirmUserFunction.Arn
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH # Required by AWS
        - ALLOW_USER_PASSWORD_AUTH

  #Give permission to Cognito to call sign up trigger
  OnCognitoSignupPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !GetAtt confirmUserFunction.Arn
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: !GetAtt CognitoUserPool.Arn

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Parameters:
  HarmonyHubTable:
    Description: The name of an existing DynamoDB table that stores posts & accounts; do not change unless you know what you are doing
    Type: String
    Default: "Technology_Project"
  CognitoClientId:
    Description: The Client ID for the Cognito application
    Type: String
    Default: "3fic1mggrt7sm16o0bs5a5jlkp"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
